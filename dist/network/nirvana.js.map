{"version":3,"file":"nirvana.js","sourceRoot":"","sources":["../../src/network/nirvana.ts"],"names":[],"mappings":"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","sourcesContent":["// import Others from '../others';\r\n\r\nimport '../../lib/websocket.bundle.js';\r\ndeclare var Nirvana: any;\r\n\r\ntype SessionConfigType = {\r\n  realms: any;\r\n  drivers: string[];\r\n  debugLevel: number\r\n};\r\n\r\ntype SessionReturnType = {\r\n  isConnected: boolean;\r\n  message: string;\r\n};\r\n\r\ntype SessionManagerType = {\r\n  session: any,\r\n  successHandler: Function | null,\r\n  stopHandler: Function | null,\r\n  errorHandler: Function | null,\r\n  disconnectHandler: Function | null,\r\n}\r\n\r\ntype ChannelErrorType = {\r\n  Connected: boolean;\r\n  ErroType: string;\r\n  Message: string;\r\n}\r\n\r\nexport default class NirvanaConnection {\r\n  private SessionManager: SessionManagerType;\r\n  private ChannelsManage = new Map<string, { channel: any, messageHandler: Function, errorHandler: Function }>();\r\n\r\n  constructor() {\r\n    // Others.addDependencies('./lib/nirvana.js', 'nirvana-script');\r\n\r\n    this.SessionManager = {\r\n      session: null,\r\n      successHandler: null,\r\n      stopHandler: null,\r\n      errorHandler: null,\r\n      disconnectHandler: null\r\n    }\r\n  }\r\n\r\n  public StartSession(realms: string[], callback: (data: SessionReturnType) => void) {\r\n    try {\r\n      if (this.SessionManager.session != null) {\r\n        throw new Error('Session is already started. Just one session is allowed at time.');\r\n      }\r\n      else {\r\n        const sessionConfig: SessionConfigType = {\r\n          realms: this.ShuffleRealms(realms),\r\n          debugLevel: 4,\r\n          drivers: [Nirvana.Driver.WEBSOCKET]\r\n        }\r\n\r\n        const SuccessHandler = ((callback: (data: SessionReturnType) => void) => {\r\n          callback({ isConnected: true, message: 'Session started' });\r\n        }).bind(null, callback);\r\n\r\n        const StopHandler = () => {\r\n          console.log('Session Stop Handler - Session stopped.',);\r\n        };\r\n\r\n        const ErrorHandler = (session: any, ex: any) => {\r\n          console.log('Session Error Handler - Session error:', ex);\r\n        };\r\n\r\n        const DisconnectHandler = () => {\r\n          console.log('Session Disconnect Handler');\r\n        }\r\n\r\n        const session = Nirvana.createSession(sessionConfig);\r\n\r\n        session.on(Nirvana.Observe.START, SuccessHandler);\r\n        session.on(Nirvana.Observe.STOP, StopHandler);\r\n        session.on(Nirvana.Observe.ERROR, ErrorHandler);\r\n        session.on(Nirvana.Observe.DISCONNECT, DisconnectHandler);\r\n\r\n        session.start();\r\n\r\n        this.SessionManager.session = session;\r\n        this.SessionManager.successHandler = SuccessHandler;\r\n        this.SessionManager.stopHandler = StopHandler;\r\n        this.SessionManager.errorHandler = ErrorHandler;\r\n        this.SessionManager.disconnectHandler = DisconnectHandler;\r\n      }\r\n    }\r\n    catch (error: any) {\r\n      callback({ isConnected: false, message: error.message });\r\n    }\r\n  }\r\n\r\n  public StopSession(callback: Function) {\r\n    //TODO: Encontrar uma forma melhor para notificar erros.    \r\n    if (this.SessionManager.session == null) {\r\n      console.log('Stop Session - Session is not started.');\r\n    }\r\n    else {\r\n      this.DisconnectAllChannels();\r\n\r\n      const session = this.SessionManager.session;\r\n      session.removeListener(Nirvana.Observe.START, this.SessionManager.successHandler);\r\n      session.removeListener(Nirvana.Observe.STOP, this.SessionManager.stopHandler);\r\n      session.removeListener(Nirvana.Observe.ERROR, this.SessionManager.errorHandler);\r\n      session.removeListener(Nirvana.Observe.DISCONNECT, this.SessionManager.disconnectHandler);\r\n\r\n      session.stop();\r\n\r\n      this.SessionManager.session = null;\r\n\r\n      console.log('Stop Session - Session stopped.');\r\n    }\r\n\r\n    callback();\r\n  }\r\n\r\n  public ConnectChannel(name: string, filters: string | string[], startMessage: number = 0, msgCallback: Function, errorCallback: (data: ChannelErrorType) => void) {\r\n    if (this.SessionManager.session == null) return;\r\n\r\n    const channel = this.SessionManager.session.getChannel(name);\r\n    const filter = this.HandleFilters(filters);\r\n\r\n    if (startMessage > 0) channel.setStartEID(startMessage);\r\n    if (filter != '') channel.setFilter(this.HandleFilters(filters));\r\n\r\n    const MessageHandler = this.ProcessChannelMessage.bind(this, msgCallback);\r\n\r\n    const ErrorHandler = ((errorCallback: (data: ChannelErrorType) => void, session: any, exception: any) => {\r\n      let errorMessage = exception.name;\r\n\r\n      //* MissingResourceException -> channel not found\r\n      if (errorMessage == 'MissingResourceException') {\r\n        this.DisconnectChannel(exception.resourceName, () => {\r\n          errorCallback({\r\n            Connected: false,\r\n            ErroType: 'ChannelNotFound',\r\n            Message: exception.message\r\n          });\r\n        });\r\n      }\r\n    }).bind(this, errorCallback);\r\n\r\n    channel.on(Nirvana.Observe.DATA, MessageHandler);\r\n    channel.on(Nirvana.Observe.ERROR, ErrorHandler);\r\n    channel.subscribe();\r\n\r\n    this.ChannelsManage.set(name, {\r\n      channel: channel,\r\n      messageHandler: MessageHandler,\r\n      errorHandler: ErrorHandler\r\n    });\r\n  }\r\n\r\n  public DisconnectChannel(name: string, callback?: Function) {\r\n    if (this.ChannelsManage.has(name)) {\r\n      const channel = this.ChannelsManage.get(name)!.channel;\r\n\r\n      channel.removeListener(Nirvana.Observe.DATA, this.ChannelsManage.get(name)!.messageHandler);\r\n      channel.removeListener(Nirvana.Observe.ERROR, this.ChannelsManage.get(name)!.errorHandler);\r\n      channel.unsubscribe();\r\n\r\n      this.ChannelsManage.delete(name);\r\n\r\n      console.log(`Disconnect Channel - Channel ${name} disconnected.`);\r\n\r\n      if (callback != null) callback(true);\r\n    }\r\n    //TODO: Encontrar uma forma melhor para notificar erros.\r\n    else console.log(`Disconnect Channel - Channel ${name} not found.`);\r\n  }\r\n\r\n  private ShuffleRealms(realms: string[]): string[] {\r\n    if (realms.length <= 1) return realms;\r\n\r\n    const totalRealms = realms.length;\r\n\r\n    const index = (Math.floor(Math.random() * totalRealms) + 1) - 1;\r\n    const randomizedServers: Array<string> = [\r\n      realms.splice(index, 1)[0],\r\n      ...realms\r\n    ];\r\n\r\n    return randomizedServers;\r\n  }\r\n\r\n  private DisconnectAllChannels() {\r\n    for (let [key, value] of this.ChannelsManage) {\r\n      this.DisconnectChannel(key);\r\n    }\r\n  }\r\n\r\n  private HandleFilters(filter: string | string[]) {\r\n    let newFilter: string;\r\n\r\n    if (typeof filter === 'string') {\r\n      newFilter = filter;\r\n    }\r\n    else {\r\n      if (filter.length > 0) {\r\n        newFilter = '(' + filter.join(') AND (') + ')';\r\n      }\r\n      else newFilter = filter[0];\r\n    }\r\n\r\n    return newFilter;\r\n  }\r\n\r\n  private ProcessChannelMessage(callback: Function, e: any) {\r\n    const dictionary = e.getDictionary();\r\n    const eventId = e.eventID[1];\r\n\r\n    let newObj: any = {};\r\n\r\n    for (var prop in dictionary.innerProperties) {\r\n      newObj[prop] = dictionary.get(prop);\r\n    }\r\n\r\n    newObj.EventId = eventId;\r\n    newObj.Channel = e.resourceName;\r\n\r\n    callback(newObj);\r\n  }\r\n}"]}