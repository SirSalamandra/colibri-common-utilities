{"version":3,"file":"mqtt.js","sourceRoot":"","sources":["../../src/network/mqtt.ts"],"names":[],"mappings":"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","sourcesContent":["// import Others from '../others';\r\n\r\nimport '../../lib/websocket.bundle.js';\r\ndeclare var Paho: any;\r\n\r\nexport type MqttOptionsType = {\r\n  userName: string;\r\n  password: string;\r\n  useSSL: boolean;\r\n  cleanSession: boolean;\r\n  mqttVersion: number;\r\n  reconnect: boolean;\r\n};\r\n\r\ntype ClientManagerType = {\r\n  session: any,\r\n  successHandler: Function | null,\r\n  stopHandler: Function | null,\r\n  errorHandler: Function | null\r\n}\r\n\r\ntype SessionReturnType = {\r\n  isConnected: boolean;\r\n  message: string;\r\n};\r\n\r\nexport default class MQTT {\r\n  ClientManager: ClientManagerType;\r\n\r\n  constructor() {\r\n    // Others.addDependencies('./lib/paho-mqtt.js', 'paho-mqtt');\r\n\r\n    this.ClientManager = {\r\n      session: null,\r\n      successHandler: null,\r\n      stopHandler: null,\r\n      errorHandler: null\r\n    }\r\n  }\r\n\r\n  public Start(broker: string, port: number, connectionOptions: MqttOptionsType, callback: (data: SessionReturnType) => void) {\r\n    const clientId = 'mqttjs_' + Math.random().toString(16).substr(2, 8);\r\n    const client = new Paho.MQTT.Client(broker, port, clientId);\r\n\r\n    const SuccessHandler = ((callback: (data: SessionReturnType) => void) => {\r\n      this.ClientManager.session = client;\r\n      callback({ isConnected: true, message: 'Session started' });\r\n    }).bind(this, callback);\r\n\r\n    const FailureHandler = ((callback: (data: SessionReturnType) => void) => {\r\n      callback({ isConnected: false, message: 'Session failed' });\r\n    }).bind(null, callback);\r\n\r\n    //* onFailure tem um parÃ¢metro de retorno (msg);\r\n    const options = { ...connectionOptions, onSuccess: SuccessHandler, onFailure: FailureHandler };\r\n    client.connect(options);\r\n  }\r\n\r\n  public Stop() {\r\n    if (this.ClientManager.session != null) {\r\n      this.ClientManager.session.disconnect();\r\n      this.ClientManager.session = null;\r\n\r\n      console.log('Session stopped.');\r\n    }\r\n    else {\r\n      console.log('Session is not started.');\r\n    }\r\n  }\r\n\r\n  public ConnectChannel(topic: string, msgCallback: Function) {\r\n    if (topic != '') {\r\n      this.ClientManager.session.onMessageArrived = (msgArrived: any) => {\r\n        const message = JSON.parse(msgArrived.payloadString);\r\n        msgCallback(message);\r\n      };\r\n\r\n      this.ClientManager.session.onConnectionLost = (responseObject: any) => {\r\n        console.log('Connection lost', responseObject);\r\n      };\r\n\r\n      const onSuccess = (a: any) => {\r\n        console.log('Connected to channel.', a);\r\n      };\r\n\r\n      const onFailure = (a: any) => {\r\n        console.log('Failure on connecting to channel.', a);\r\n      };\r\n\r\n      const options = { onSuccess: onSuccess, onFailure: onFailure };\r\n      this.ClientManager.session.subscribe(topic, options);\r\n    }\r\n  }\r\n\r\n  public DisconnectChannel(topic: string) {\r\n    if (topic != '') {\r\n      const onSuccess = (a: any) => {\r\n        console.log('Disconnected from channel.', a);\r\n      }\r\n\r\n      const onFailure = (a: any) => {\r\n        console.log('Failure on disconnecting from channel.', a);\r\n      }\r\n\r\n      const options = {\r\n        onSuccess: onSuccess,\r\n        onFailure: onFailure\r\n      }\r\n\r\n      this.ClientManager.session.unsubscribe(topic, options);\r\n    }\r\n  }\r\n}"]}